#!/usr/bin/env python
Import("env")
import os

class Color:
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    MAGENTA = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    RESET = "\033[0m"


editor_tools_enabled = env["tools"]

def color_text(text, color):
    return f"{color}{text}{Color.RESET}"

def should_compile(file_path):
    """
    Check if the file should be compiled based on its contents.
    The check is bypassed if building for the editor (tools=yes).
    """
    if editor_tools_enabled:
        return True

    try:
        with open(file_path, "r") as file:
            lines = file.readlines()
            if (
                len(lines) >= 2
                and lines[0].strip().startswith("#ifndef ADVANCED_GUI_DISABLED")
                and lines[-2].strip() == "#endif"
            ):
                print(color_text(f"Skipping compilation for {file_path}", Color.GREEN))
                return False
    except Exception as e:
        print(color_text(f"Error reading file {file_path}: {str(e)}", Color.RED))
        return True  # Assume true if there"s an error reading the file

    return True

base_path = env.Dir(".").abspath
source_files = env.Glob("*.cpp")

filtered_files = [f for f in source_files if should_compile(os.path.join(base_path, f.name))]

env.add_source_files(env.scene_sources, filtered_files)
